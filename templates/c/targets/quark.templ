{% extends core %}

{% block includes %}
#include<quark.h>
{% endblock %}

{% block kernel %}
{% endblock %}

{% block spawners %}
typedef void (*spawner_func_t)(Quark *quark);
{% for t in tasks %}
void {{t.name}}_dospawn (Quark *quark);
{% endfor %}
{% endblock %}

{% block target %}
{% for s in sigs %}
void {{s.name}}_body (Quark *);
{% endfor %}

{% for s in sigs %}
void {{s.name}}_body (Quark *quark)
{
	unsigned long uid;
	void *last_arg = NULL;
	void *arg;
	void *arglist;
	arglist = QUARK_Args_List(quark);
	arg = QUARK_Args_Pop(arglist, &last_arg);
	uid = *(unsigned long*)arg;
	task_t *t = &tasks[uid];
	depbench_core_taskbody(uid);
}
{% endfor %}

{% for t in tasks %}
void {{t.name}}_dospawn(Quark *quark) {}
{% endfor %}

{% endblock target %}

{% block main_definitions %}
	Quark *quark;
	Quark_Task *task;
	Quark_Task_Flags task_flags = Quark_Task_Flags_Initializer;
{% endblock %}

{% block main_init %}
	quark = QUARK_New(0);
{% endblock %}
    
{% block main_spawnsource %}
{% set source = tasks|first %}
	depbench_core_taskbody({{source.uid}});
{% for c in source.children %}
	task = QUARK_Task_Init(quark,{{c.sig.name}}_body,&task_flags);
	QUARK_Task_Pack_Arg(quark,task,sizeof(unsigned long), &tasks[{{c.uid}}].uid, VALUE);
{% for a in c.args %}
	QUARK_Task_Pack_Arg(quark,task,datas[{{a.uid}}].size,datas[{{a.uid}}].mem,
	{%- if a.access == 'IN' -%}
	INPUT
	{%- elif a.access == 'OUT' -%}
	OUTPUT
	{%- endif -%}
	);
{% endfor %}
	QUARK_Insert_Task_Packed(quark,task);
{% endfor %}
	QUARK_Waitall(quark);
{% endblock %}

{% block main_finalize %}
	QUARK_Delete(quark);
{% endblock %}
