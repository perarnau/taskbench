{% extends core %}

{% block includes %}
{% endblock %}

{% block kernel %}
{% endblock %}

{% block spawners %}
typedef void (*spawner_func_t)(void);
{% for t in tasks %}
void {{t.name}}_dospawn (void);
{% endfor %}
{% endblock %}

{% block target %}
{% for s in sigs %}
void {{s.name}}_body ( unsigned long uid {%- for i in range(s.args|length) -%}
    , void *arg{{i}}
{%- endfor %}
);

{% endfor %}

{% for s in sigs %}
void {{s.name}}_body ( unsigned long uid {%- for i in range(s.args|length) -%}
    , void *arg{{i}}
{%- endfor %}
)
{
	task_t *t = &tasks[uid];
	depbench_core_taskbody(uid);
	for(unsigned int i = 0; i < t->num_children; i++)
	{
		t->children[i]->spawner();
	}
}
{% endfor %}

{% for t in tasks %}
void {{t.name}}_dospawn(void)
{
	{% set pipe = joiner(" ") %}
	#pragma omp task {% for a in t.args -%}
	{%- if a.access == 'IN' -%}
	{{pipe()}}in(datas[{{a.uid}}].mem [ datas[{{a.uid}}].size ])
	{%- elif a.access == 'OUT' -%}
	{{pipe()}}out(datas[{{a.uid}}].mem [ datas[{{a.uid}}].size ])
	{%- endif -%}
	{%- endfor %}

	{{t.sig.name}}_body({{t.uid}} {%- for a in t.args -%}
		, datas[{{a.uid}}].mem
	{%- endfor %} );
}
{% endfor %}

{% endblock target %}

{% block main_definitions %}
{% endblock %}

{% block main_init %}
{% endblock %}
    
{% block main_spawnsource %}
{% set source = tasks|first %}
	#pragma omp task 
	{{source.sig.name}}_body({{source.uid}});
	#pragma omp taskwait 
{% endblock %}

{% block main_finalize %}
{% endblock %}

