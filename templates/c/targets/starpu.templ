{% extends core %}

{% block includes %}
#include<starpu.h>
{% endblock %}

{% block kernel %}
{% endblock %}

{% block taskbody_allocs %}
{% endblock %}

{% block spawners %}
typedef void (*spawner_func_t)(void);
{% for t in tasks %}
void {{t.name}}_dospawn (void);
{% endfor %}
{% endblock %}

{% block target %}
{% for s in sigs %}
void {{s.name}}_body (void *buffers[], void *cl_arg);
{% endfor %}

/* the perfmodel helper for starpu scheduling */
static size_t get_size_base(struct starpu_task *t, unsigned nimpl)
{
	unsigned long *tid = (unsigned long*)t->cl_arg;
	return tasks[*tid].size;
}

static struct starpu_perfmodel myperfmodel =
{
	.type = STARPU_HISTORY_BASED,
	.size_base = get_size_base,
	.symbol = "HISTORY_WITH_GET_SIZE",
};


{% for s in sigs %}
#if {{s.args|length}} > STARPU_NMAXBUFS
enum starpu_data_access_mode {{s.name}}_modes[{{s.args|length}}] = {
{% for a in s.args %}
	{% if a.access == "IN" %}
		STARPU_R,
	{% elif a.access == "OUT" %}
		STARPU_W,
	{% endif %}
{% endfor %}
};
struct starpu_codelet {{s.name}}_cl = {
.cpu_funcs = { {{s.name}}_body, NULL },
.nbuffers = {{s.args|length}},
.dyn_modes = {{s.name}}_modes,
.model = &myperfmodel,
};
#else
struct starpu_codelet {{s.name}}_cl = {
.cpu_funcs = { {{s.name}}_body, NULL },
.nbuffers = {{s.args|length}},
.modes = {
{% for a in s.args %}
	{% if a.access == "IN" %}
		STARPU_R,
	{% elif a.access == "OUT" %}
		STARPU_W,
	{% endif %}
{% endfor %}
},
.model = &myperfmodel,
};
#endif
{% endfor %}
starpu_data_handle_t alloc_handles[{{datas|length}}];

{% for s in sigs %}
void {{s.name}}_body (void *buffers[], void *cl_arg)
{
	unsigned long uid = *(unsigned long*)cl_arg;
	task_t *t = &tasks[uid];
	depbench_core_taskbody(uid);
	for(unsigned int i = 0; i < t->num_allocs; i++)
	{
		data_t *d = t->allocs[i];
		starpu_vector_data_register(&alloc_handles[d->uid], 0, (uintptr_t)d->mem, d->size, 1);
	}
	for(unsigned int i = 0; i < t->num_children; i++)
	{
		t->children[i]->spawner();
	}
}
{% endfor %}

{% for t in tasks %}
void {{t.name}}_dospawn(void)
{
	struct starpu_task *st;
	st = starpu_task_create();
	st->cl = &{{t.sig.name}}_cl;
	st->cl_arg = &tasks[{{t.uid}}].uid;
	st->cl_arg_size = sizeof(unsigned long);
#if {{t.args|length}} > STARPU_NMAXBUFS
	st->dyn_handles = calloc(st->cl->nbuffers, sizeof(starpu_data_handle_t));
	{% for a in t.args %}
	st->dyn_handles[{{loop.index0}}] = alloc_handles[{{a.uid}}];
	{% endfor %}
#else
	{% for a in t.args %}
	st->handles[{{loop.index0}}] = alloc_handles[{{a.uid}}];
	{% endfor %}
#endif
	assert(!starpu_task_submit(st));
}
{% endfor %}

{% endblock target %}

{% block main_definitions %}
	struct starpu_task *task;
{% endblock %}

{% block main_init %}
	assert(!starpu_init(NULL));
{% endblock %}

{% block main_spawnsource %}
{% set source = tasks|first %}
	task = starpu_task_create();
	task->cl = &{{source.sig.name}}_cl;
	task->cl_arg = &tasks[{{source.uid}}].uid;
	task->cl_arg_size = sizeof(unsigned long);
	assert(!starpu_task_submit(task));
	starpu_task_wait_for_all();
{% endblock %}

{% block main_finalize %}
	starpu_shutdown();
{% endblock %}

