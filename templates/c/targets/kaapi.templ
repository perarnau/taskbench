{% extends core %}

{% block includes %}
#include<kaapi.h>
#include<stddef.h>
{% endblock %}

{% block kernel %}
{% endblock %}

{% block spawners %}
typedef void (*spawner_func_t)(kaapi_thread_t *thread);
{% for t in tasks %}
void {{t.name}}_dospawn (kaapi_thread_t *thread);
{% endfor %}
{% endblock %}

{% block target %}
{% for s in sigs %}
void {{s.name}}_body (void *taskarg, kaapi_thread_t *thread);
{% endfor %}

{% for s in sigs %}
typedef struct {{s.name}}_arg_t {
	unsigned long uid;
{% for i in range(0, s.args|length) %}
	kaapi_access_t arg{{i}};
{% endfor %}
} {{s.name}}_arg_t;

KAAPI_REGISTER_TASKFORMAT( {{s.name}}_format,
	"{{s.name}}", {{s.name}}_body, sizeof({{s.name}}_arg_t), {{ s.args|length +1}},
	(kaapi_access_mode_t[]) {
		KAAPI_ACCESS_MODE_V
	{% for a in s.args %}
	{% if a.access == "IN" %}
		, KAAPI_ACCESS_MODE_R
	{% elif a.access == "OUT" %}
		, KAAPI_ACCESS_MODE_W
	{% elif a.access == "INP" %}
		, KAAPI_ACCESS_MODE_R|KAAPI_ACCESS_MODE_P
	{% elif a.access == "OUTP" %}
		, KAAPI_ACCESS_MODE_W|KAAPI_ACCESS_MODE_P
	{% endif %}
	{% endfor %}
	},
	(kaapi_offset_t[]) {
		offsetof({{s.name}}_arg_t, uid)
	{% for a in s.args %}
		, offsetof({{s.name}}_arg_t, arg{{loop.index0}}.data)
	{% endfor %}
	},

	(kaapi_offset_t[]) {
		0
	{% for a in s.args %}
		, offsetof({{s.name}}_arg_t, arg{{loop.index0}}.version)
	{% endfor %}
	},

	(const struct kaapi_format_t*[]) {
		kaapi_ulong_format
	{% for a in s.args %}
		,kaapi_voidp_format
	{% endfor %}
	},
	0
)
{% endfor %}

{% for s in sigs %}
void {{s.name}}_body (void *taskarg, kaapi_thread_t *thread)
{
	{{s.name}}_arg_t *myarg = ({{s.name}}_arg_t*)taskarg;
	task_t *t = &tasks[myarg->uid];
	depbench_core_taskbody(myarg->uid);
	for(unsigned int i = 0; i < t->num_children; i++)
	{
		t->children[i]->spawner(thread);
	}
}
{% endfor %}

{% for t in tasks %}
void {{t.name}}_dospawn(kaapi_thread_t *thread)
{
	kaapi_task_t *kt;
	{{t.sig.name}}_arg_t* arg;
	kt = kaapi_thread_toptask(thread);
	kaapi_task_init(kt, {{t.sig.name}}_body,
			kaapi_thread_pushdata(thread, sizeof({{t.sig.name}}_arg_t)));

	arg = kaapi_task_getargst(kt,{{t.sig.name}}_arg_t);
	arg->uid = {{t.uid}};
	{% for a in t.args %}
	{% if a.uid in t.allocs|attr("uid") %}
	kaapi_access_init(&arg->arg{{loop.index0}},datas[{{a.uid}}].mem);
	{% else %}
	arg->arg{{loop.index0}}.data = datas[{{a.uid}}].mem;
	{% endif %}
	{% endfor %}
	kaapi_thread_pushtask(thread);
}
{% endfor %}

{% endblock target %}

{% block main_definitions %}
{% set source = tasks|first %}
	kaapi_task_t *task;
	kaapi_thread_t *thread;
	{{source.sig.name}}_arg_t *arg;
{% endblock %}

{% block main_init %}
	kaapi_init(1,&argc,&argv);
	thread = kaapi_self_thread();
{% endblock %}

{% block main_spawnsource %}
{% set source = tasks|first %}
	task = kaapi_thread_toptask(thread);
	kaapi_task_init(task,{{source.sig.name}}_body,kaapi_thread_pushdata(thread,sizeof({{source.sig.name}}_arg_t)));
	arg = kaapi_task_getargst(task, {{source.sig.name}}_arg_t);
	arg->uid = {{source.uid}};
	kaapi_thread_pushtask(thread);
	kaapi_sched_sync();
{% endblock %}

{% block main_finalize %}
	kaapi_finalize();
{% endblock %}
